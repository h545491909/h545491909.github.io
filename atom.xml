<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>引流觞曲水 墨谁人心扉</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-18T07:36:37.563Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>流墨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>主页</title>
    <link href="http://yoursite.com/2020/02/17/hello-world/"/>
    <id>http://yoursite.com/2020/02/17/hello-world/</id>
    <published>2020-02-17T10:00:12.467Z</published>
    <updated>2020-02-18T07:36:37.563Z</updated>
    
    <content type="html"><![CDATA[<p><strong>小记</strong></p><h1 id="练习笔记"><a href="#练习笔记" class="headerlink" title="练习笔记"></a>练习笔记</h1><h3 id="深度搜索"><a href="#深度搜索" class="headerlink" title="深度搜索"></a>深度搜索</h3><h4 id="排列数字"><a href="#排列数字" class="headerlink" title="排列数字"></a>排列数字</h4><p>给定一个整数n，将数字1~n排成一排，将会有很多种排列方法。现在，请你按照字典序将所有的排列方法输出。</p><p><strong>输入格式</strong><br>共一行，包含一个整数n。</p><p><strong>输出格式</strong><br>按字典序输出所有排列方案，每个方案占一行。</p><p><strong>数据范围</strong><br>1≤n≤7<br><strong>输入样例：</strong><br>3<br><strong>输出样例：</strong><br>1 2 3<br>1 3 2<br>2 1 3<br>2 3 1<br>3 1 2<br>3 2 1</p><p>1.dfs进行递归，表示的意义？<br>2.如何加深对dfs的理解（求法）？<br>3.为何回溯时，进行现场的恢复？<br>此题中dfs表示的含义是：求出从第u行到最后一行的所有path。<br>dfs的求法：根据通项公式的含义，假设已知第u+1行到最后一行的所有path，综合1和2得出：path[u] 与 path[u+1] 合并后，即为dfs的解。<br>回溯的特征是：递归的最外层是一个循环。因为一次dfs得到的是所有的path。每一次都是从当前现场中去取得剩下未访问的元素。（这一块自己画个图就很容易理解）。<br>反证：如果不进行现场的恢复，则在第一次完成深搜后，所有元素都已经被访问过了。这样在回溯到上一层时，上层的现场中的状态都被下层更改了，数据就会乱套。</p><p><strong>代码实现</strong>  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> path[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">bool</span> st[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span><span class="comment">//计算路径</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>（u == u）&#123;<span class="comment">//走到底</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,path[i]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">                path[u] = i;</span><br><span class="line">                st[i] = <span class="literal">true</span>;</span><br><span class="line">                dfs(u + <span class="number">1</span>);<span class="comment">//回溯</span></span><br><span class="line">                path[u] = <span class="number">0</span>;</span><br><span class="line">                st[i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    dfs(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="博弈论总结"><a href="#博弈论总结" class="headerlink" title="博弈论总结"></a>博弈论总结</h3><p>几种模型均存在奇异局面，即双方均采取最优策略，若处于奇异局面，必败。</p><h4 id="巴什博弈"><a href="#巴什博弈" class="headerlink" title="巴什博弈"></a>巴什博弈</h4><p>只有一堆n个物品，两个人轮流从这堆物品中取物，规定每次至少取一个，最多取m个。最后取光者得胜。 </p><p>分析</p><p>当总个数小于等于m的时候，先手胜。</p><p>当总个数为m + 1的时候，后手胜。</p><p>当总个数为m + 2的时候，先手可使后手面对m + 1局面，先手胜。</p><p>可推断，若总个数为k *（m + 1）,后手胜。</p><p>若总个数为k * (m + 1) + s(s &lt;= m),先手胜。</p><p>大体思路</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(n % (m + <span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> first win;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> second win;</span><br></pre></td></tr></table></figure><h4 id="斐波那契博弈"><a href="#斐波那契博弈" class="headerlink" title="斐波那契博弈"></a>斐波那契博弈</h4><p>1堆石子有n个,两人轮流取.先取者第1次可以取任意多个，但不能全部取完.以后每次取的石子数不能超过上次取子数的2倍。取完者胜.</p><p>结论：当n为斐波那契数时，先手必败。</p><p>分析见：<a href="https://blog.csdn.net/dgq8211/article/details/7602807" target="_blank" rel="noopener">https://blog.csdn.net/dgq8211/article/details/7602807</a>   </p><p><strong>大体思路</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span><span class="comment">//斐波那契数列，先打表，范围看情况</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[<span class="number">0</span>]=f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">55</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i]=f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;f[i];i++)&#123;<span class="comment">//分别比较，判断出n是否是斐波那契数</span></span><br><span class="line">    <span class="keyword">if</span>(f[i] == n)&#123;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line">    <span class="keyword">return</span> first win;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> second win;</span><br></pre></td></tr></table></figure><h4 id="威佐夫博弈"><a href="#威佐夫博弈" class="headerlink" title="威佐夫博弈"></a>威佐夫博弈</h4><p>有两堆各若干个物品,两个人轮流从某一堆或同时从两堆中取同样多的物品,规定每次至少取一个,多者不限,最后取光者得胜. </p><p><strong>结论</strong>：若两堆物品的初始值为(x，y)，则另z=abs（y-x）；记w=（int)[ ( (sqrt(5)+1) /2 )*z ]；若w=min(x,y)，则先手必败，否则先手必胜。 </p><p>大体思路</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> z=<span class="built_in">abs</span>(y-x);</span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">int</span>)(((<span class="built_in">sqrt</span>(<span class="number">5</span>)+<span class="number">1</span>)/<span class="number">2</span>)*z)!=<span class="built_in">min</span>(x,y))</span><br><span class="line">    <span class="keyword">return</span> first win;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> second win;</span><br></pre></td></tr></table></figure><h4 id="尼姆博弈"><a href="#尼姆博弈" class="headerlink" title="尼姆博弈"></a>尼姆博弈</h4><p>有任意堆物品，每堆物品的个数是任意的，双方轮流从中取物品，每一次只能从一堆物品中取部分或全部物品，最少取一件，取到最后一件物品的人获胜。</p><p>结论：判断这几堆物品的异或运算结果是否为0，如果为零，则先手必败。 </p><p>分析：<a href="https://blog.csdn.net/u013514928/article/details/69055286" target="_blank" rel="noopener">https://blog.csdn.net/u013514928/article/details/69055286</a> </p><p>大体思路</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">    num ^= a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num)</span><br><span class="line"><span class="keyword">return</span> first win;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> second win;</span><br></pre></td></tr></table></figure><h4 id="SG函数"><a href="#SG函数" class="headerlink" title="SG函数"></a>SG函数</h4><p>后续再说。。。整不明白。。。</p><h3 id="为什么要对1000000007取模（取余）（转载自柳婼）"><a href="#为什么要对1000000007取模（取余）（转载自柳婼）" class="headerlink" title="为什么要对1000000007取模（取余）（转载自柳婼）"></a>为什么要对1000000007取模（取余）（转载自柳婼）</h3><ol><li>1000000007是一个质数（素数），对质数取余能最大程度避免冲突。</li><li>int32位的最大值为2147483647，所以对于int32位来说1000000007足够大。</li><li>int64位的最大值为2^63-1，对于1000000007来说它的平方不会在int64中溢出<br>所以在大数相乘的时候，因为(a∗b)%c=((a%c)∗(b%c))%c，所以相乘时两边都对1000000007取模，再保存在int64里面不会溢出。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;小记&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;练习笔记&quot;&gt;&lt;a href=&quot;#练习笔记&quot; class=&quot;headerlink&quot; title=&quot;练习笔记&quot;&gt;&lt;/a&gt;练习笔记&lt;/h1&gt;&lt;h3 id=&quot;深度搜索&quot;&gt;&lt;a href=&quot;#深度搜索&quot; class=&quot;h
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
